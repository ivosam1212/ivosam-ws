{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About me","text":"<p>I am a technical writer with seven years of professional experience, including five years dedicated to technical writing and two years as a Business Analyst.</p> <p>As a graduate in Computer Systems Engineering, I have always been passionate about technology, and I channel this passion into my work as a technical writer. My background in technology allows me to delve deep into the core of projects, ensuring a comprehensive understanding of the subject matter. I leverage this understanding to create high-quality documentation for diverse users.</p> <p>Throughout my career, I have worked on a wide range of projects, each presenting unique challenges and opportunities. I have created documents for mobile platforms, bots platforms, e-commerce systems, discovery processes, among others. This diverse experience has not only honed my technical writing skills but has also made me adaptable and capable of delivering effective documentation across various domains.</p> <p>Some of my key qualifications and skills include:</p> <ul> <li>Proficiency in creating user-friendly documentation, including user manuals, online help systems, and knowledge base articles.</li> <li>Strong technical background, allowing me to comprehend complex technical concepts and communicate them clearly.</li> <li>Excellent collaboration skills, facilitating effective communication with cross-functional teams.</li> <li>Ability to adapt to new technologies and concepts rapidly, ensuring accurate and up-to-date documentation. Strong problem-solving skills and meticulous attention to detail.</li> </ul>"},{"location":"concepts/","title":"Sample 2 - Explaining Concepts","text":"<p>This section presents the main differences between the Representational State Transfer (REST) and the Simple Object Access Protocol (SOAP) web services.</p> <p>REST and SOAP are two of the most used web services nowadays. Both provide a communication channel between clients and servers over the internet.</p> <p>The following table lists the main differences between REST and SOAP:</p> Topic REST SOAP Style REST is an architectural style, meaning that there are principles to design a REST-like web service, not rules. SOAP is a protocol, meaning that there are guidelines to follow for communicating data. Communication Protocols It uses the HTTP protocol to request and retrieve data. It can use HTTP, SMTP, or FTP protocols. Communication Formats The most popular are XML and JSON formats. It uses  XML  messaging  format between the client and the server. It contains a SOAP Envelop with a header, a body, and a fault element for errors. Data cached Can cache data Cannot cache data Security Supports HTTPS and SSL. Built-in standard such as WS-Security in addition to SSL support. Transactions Data-driven. It accesses a resource and requests, stores, or modifies data. SOAP performs operations such as transferring structured information. Performance Message size is considerably lesser than SOAP messages, making REST faster to transmit data. SOAP requires more bandwidth and resources, making it slower than REST."},{"location":"concepts/#rest-or-soap","title":"REST or SOAP","text":"<p>Even though REST proves to have lighter payloads and faster responses, SOAP integrates security and reliability.  You can use SOAP for:</p> <ul> <li>banking</li> <li>financial applications</li> <li>telecommunication services</li> <li>sensible, historical information</li> </ul> <p>REST can work better for performance-driven projects, such as:</p> <ul> <li>mobile services</li> <li>chats</li> <li>lightweight web services</li> <li>scalable and flexible applications</li> </ul>"},{"location":"instructions/","title":"Sample 3 - How to Play Tic-Tac-Toe","text":"<p>This section presents a brief description of the game Tic-Tac-Toe and how to play it.</p>"},{"location":"instructions/#audience","title":"Audience","text":"<p>The document is aimed at people that don't know how to play the game.</p>"},{"location":"instructions/#tic-tac-toe-description","title":"Tic-Tac-Toe description","text":"<p>Tic-Tac-Toe is a game designed for two players. It consists of a nine-space (3x3) grid where the players need to fill three consecutive symbols, Xs for one player and Os for the other. The first player to complete the sequence wins the game.</p>"},{"location":"instructions/#rules","title":"Rules","text":"<p>There are some rules to consider when playing Tic-Tac-Toe. Players must:</p> <ul> <li>Choose and use only one symbol per game</li> <li>Draw their symbol once per turn</li> <li>Draw only on blank spaces</li> </ul>"},{"location":"instructions/#instructions","title":"Instructions","text":"<p>To play Tic-Tac-Toe:</p> <ol> <li>The first player marks one of the spaces with their selected symbol.</li> <li>The second player marks one of the remaining blank spaces.</li> <li>Repeat steps one and two until one of the players marks three consecutive spaces. The sequence can be one of the following options:<ul> <li>Horizontal</li> <li>Vertical</li> <li>Diagonal</li> </ul> </li> </ol> <p>Note: If both players fill the grid without marking three consecutive spaces, the game ends in a tie and they can restart it.</p>"},{"location":"method-reference/","title":"Sample 1: Method reference - findNeedles","text":"<p>This is a reference document for the <code>findNeedles</code> method. This method finds a set of words inside a string, and displays how many times finds a match for each word.</p>"},{"location":"method-reference/#syntax","title":"Syntax","text":"<p>The following code sample represents a find needles in haystack method written in Java:</p> <pre><code>public static void findNeedles(String haystack, String[] needles) {\n    if (needles.length &gt; 5) {\n        System.err.println(\"Too many words!\");\n    } else {\n        int[] countArray = new int[needles.length];\n        for (int i = 0; i&lt;needles.length; i++) {\n            String[] words = haystack.split(\"[ \\\"\\'\\t\\n\\b\\f\\r]\", 0);\n            for (int j = 0; j&lt;words.length; j++) {\n                if (words[j].compareTo(needles[i]) == 0) {\n                    countArray[i]++;\n                }\n            }\n        }\n        for (int j = 0; j&lt;needles.length; j++) {\n            System.out.println(needles[j] + \": \" + countArray[j]);\n        }\n    }\n}\n</code></pre>"},{"location":"method-reference/#parameters","title":"Parameters","text":"<p>The method receives two parameters:</p> <pre><code>public static void findNeedles(String haystack, String[] needles)\n</code></pre> <ul> <li><code>haystack</code>: the string containing the available words </li> <li><code>needles</code>: the words to find in the haystack </li> </ul>"},{"location":"method-reference/#execution-condition","title":"Execution condition","text":"<p>This method only works for a set of maximum five words. If the <code>needles</code> array contains more than five elements, an error message is displayed.</p> <pre><code>if (needles.length &gt; 5) {\n        System.err.println(\"Too many words!\");\n</code></pre>"},{"location":"method-reference/#haystack-split-and-word-comparison","title":"Haystack split and word comparison","text":"<p>If the <code>needles</code> array contains five elements or less, creates an array to store the count of each word in <code>needles</code>.</p> <pre><code>else {\n        int[] countArray = new int[needles.length];\n</code></pre> <p>The following <code>for</code> loop separates the <code>haystack</code> string into single words using the <code>split</code> Java method and stores them in a new array of strings called <code>words</code>. </p> <pre><code>for (int i = 0; i&lt;needles.length; i++) {\n    String[] words = haystack.split(\"[ \\\"\\'\\t\\n\\b\\f\\r]\", 0);\n    for (int j = 0; j&lt;words.length; j++) {\n        if (words[j].compareTo(needles[i]) == 0) {\n            countArray[i]++;\n        }\n    }\n}\n</code></pre> <p>The <code>split</code> method takes two arguments: a regular expression and a limit. In this case:</p> <ul> <li><code>\"[\\\"\\'\\t\\n\\b\\f\\r]\"</code> : This regular expression separates words from the text when it finds double quotes, single quotes, tabs, blank spaces, and line breaks.</li> <li><code>0</code>: The <code>0</code> limit means that splitting will happen as many times as needed.</li> </ul> <p>Note: To know more about the <code>split</code> method, visit the String Class documentation and navigate to the split section.</p> <p>The inner <code>for</code> loop compares, using the <code>compareTo</code> Java method, each string of the <code>words</code> array with the word in the current position of the <code>needles</code> array. </p> <pre><code>for (int j = 0; j&lt;words.length; j++) {\n        if (words[j].compareTo(needles[i]) == 0) {\n            countArray[i]++;\n        }\n    }\n}\n</code></pre> <p>For each comparison, the code checks if the <code>compareTo</code> method returned a <code>0</code>, indicating a match between both words. If there is a match, it increases the counter for that word.</p> <p>Note: To know more about the <code>compareTo</code> method, visit the Comparable documentation.</p>"},{"location":"method-reference/#calling-the-method-and-displaying-the-output","title":"Calling the method and displaying the output","text":"<p>Calling the method returns each word in <code>needles</code> and the number of times that it was found inside the <code>haystack</code> string.</p> <p>Here is an example of calling the method:</p> <pre><code>String[] needles = new String[]{\"hello\",\"hollo\",\"hullo\", \"hillo\", \"hallo\"};\n\nfindNeedles(\"hello\\'hello\\thello\\bwhole'\\nhullo'hullo hillo\", needles);\n</code></pre> <p>Which returns the following:</p> <pre><code>hello: 3\nhollo: 0\nhullo: 2\nhillo: 1\nhallo: 0\n</code></pre>"},{"location":"pulse/","title":"Live documentation 1 - Product","text":"<p>In addition to the examples in the previous sections, I also include a link to my contribution in product documentation. The Pulse section in Adjust's Help Center is of my authorship, including all its sub-pages. </p> <p>I followed the company's style guide and practices to create all articles. Here is a list of articles documenting the Pulse product:</p> <ul> <li>Pulse<ul> <li>Metric alerts<ul> <li>Create an alert</li> <li>Manage your alert</li> </ul> </li> <li>Connection alerts</li> <li>Slack workspace</li> <li>Alert logging</li> </ul> </li> </ul>"},{"location":"react-sdk/","title":"Live documentation 2 - SDK","text":"<p>Another example of live documentation is the React Native SDK section. This Help Center section for Adjust is an example of developer documentation.</p> <p>It is important to mention that even though this whole section is of my authorship, I followed the company template and their DevDocs style guide, making it very similar in concept description as all the other documents for the SDKs that the company provides. The challenge here was to understand how the React Native SDK works and fetching the code snippets relevant to its different classes and methods.</p> <p>The SDK includes these articles and their sub-pages:</p> <ul> <li>React Native SDK<ul> <li>Features</li> <li>SDK reference</li> </ul> </li> </ul>"}]}